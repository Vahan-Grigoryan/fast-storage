STEPS:

SERVER-------------------------------------------------------------------------
1)Create and run container where will be VNC server(assumed that container use ubuntu image) by:
docker run -p 5900:5900 -it --privileged --name VNC_Server ubuntu
--privileged option for start chrome in desktop as another user, not root(option is optional if need to run chrome in desktop)
and run:
apt-get update; apt-get clean && \
apt-get install -y vim libdbus-1-3 libgbm1 libnss3 libdrm2 libxkbcommon0 x11vnc xvfb fluxbox wget wmctrl gnupg && \
wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - && \
echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list && \
apt-get update && apt-get -y install google-chrome-stable

2)create startup.sh file with following content:
---------
#!/bin/bash

# Based on: http://www.richud.com/wiki/Ubuntu_Fluxbox_GUI_with_x11vnc_and_Xvfb

readonly G_LOG_I='[INFO]'
readonly G_LOG_W='[WARN]'
readonly G_LOG_E='[ERROR]'

main() {
    launch_xvfb
    launch_window_manager
    run_vnc_server
}

launch_xvfb() {
    # Set defaults if the user did not specify envs.
    export DISPLAY=${XVFB_DISPLAY:-:1}
    local screen=${XVFB_SCREEN:-0}
    local resolution=${XVFB_RESOLUTION:-1280x1024x24}
    local timeout=${XVFB_TIMEOUT:-5}

    # Start and wait for either Xvfb to be fully up or we hit the timeout.
    Xvfb ${DISPLAY} -screen ${screen} ${resolution} &
    local loopCount=0
    until xdpyinfo -display ${DISPLAY} > /dev/null 2>&1
    do
        loopCount=$((loopCount+1))
        sleep 1
        if [ ${loopCount} -gt ${timeout} ]
        then
            echo "${G_LOG_E} xvfb failed to start."
            exit 1
        fi
    done
}

launch_window_manager() {
    local timeout=${XVFB_TIMEOUT:-5}

    # Start and wait for either fluxbox to be fully up or we hit the timeout.
    startfluxbox &
    local loopCount=0
    until wmctrl -m > /dev/null 2>&1
    do
        loopCount=$((loopCount+1))
        sleep 1
        if [ ${loopCount} -gt ${timeout} ]
        then
            echo "${G_LOG_E} fluxbox failed to start."
            exit 1
        fi
    done
}

run_vnc_server() {
    local passwordArgument='-nopw'

    if [ -n "${VNC_SERVER_PASSWORD}" ]
    then
        local passwordFilePath="${HOME}/x11vnc.pass"
        if ! x11vnc -storepasswd "${VNC_SERVER_PASSWORD}" "${passwordFilePath}"
        then
            echo "${G_LOG_E} Failed to store x11vnc password."
            exit 1
        fi
        passwordArgument=-"-rfbauth ${passwordFilePath}"
        echo "${G_LOG_I} The VNC server will ask for a password."
    else
        echo "${G_LOG_W} The VNC server will NOT ask for a password."
    fi

    x11vnc -display ${DISPLAY} -forever -shared ${passwordArgument} &
    wait $!
}

control_c() {
    pkill fluxbox && pkill x11vnc
    echo ""
    exit
}

trap control_c SIGINT SIGTERM SIGHUP

main

exit
-----------

run it by: 
chmod +x startup.sh && ./startup.sh // For run desktop without chrome availability
or 
useradd luser
chmod +x startup.sh && su -c "./startup.sh" luser // For run desktop as "luser" user, if need to run chrome
Server will run successfully and waits for connections


CLIENT------------------------------------------------------------------------
1)Create and run container where will be VNC client(assumed that container use ubuntu image) by:
docker run -p 5800:5800 -it --name VNC_Client ubuntu
and run:
apt-get update && apt install -y python3 git && \
git clone https://github.com/novnc/noVNC.git noVNC_test && \
./noVNC_test/utils/novnc_proxy --vnc VNC_SERVER_CONTAINER_IP:5900 --listen 0.0.0.0:5800

VNC_SERVER_CONTAINER_IP can be received by command: docker inspect <container_id> | find "IPAddress"

Go to 
http://localhost:5800/vnc.html?host=localhost&port=5800
and enjoy
